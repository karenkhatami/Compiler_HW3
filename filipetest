/* Test Cases*/

int MatrixMultiplication(int V1[][10], int V2[][10])
{
 int result[10][10];          

/* 1.a:   i is not defined --> ID (i) undeclared. */
   for (i = 0; i < 10; i = i + 1) 
   {
      for(j = 0; j < 10; j = j + 1) 
      {

/* 1.b:   j is redclared --> ID (j) redeclared. */
			int j;
			float j;

            result[i] = 0;
            for (k = 0; k < 10; k = k + 1) 
            {
				result[i][j] = result[i][j] + V1[i][k]*V2[k][j];
            }
      }
   }
/* 2.b:   should return int  -->  Incompatible return type. */
  return ;
}

int main()
{

	typedef int COUNTERS;
	COUNTERS i;

	float someReal12345;

	int a,b,n;

	int Array3D[3][4][5];
	
/* 2.a:   too many arguments to function */
	MatrixMultiplication ( a, b,c);
/* 2.a:   too few arguments to function */
	MatrixMultiplication ( a);

/* 3.a:   Incompatible array dimensions */	
	a = 2 + Array3D[1];
/* 3.b:   Array subscript is not an integer */	
	a = 2 + Array3D[someReal12345];
/* 3.c:   Array (Array3D) passed to scalar parameter */	
	a = 2 + Array3D;
/* 3.c:   Scalar (a) passed to array parameter */	
	a[2] = 2 + Array3D[1][1][1];

	write("Input some real number:");
	n = read();
	someReal12345 = fread();

	a = 200000;
	while( n != 0) 
	{
		a = a/n;
		n = n - 1;
	}

	if ( someReal12345 <= 120.05) 
	{
		write("It is less") ;
	} 
	else 
	{
		int a,b,c;
		struct x {
			int a,a1,a2;
			float b;
			int a3[10][10];
			int a1;
			struct x Z;
		} y1, y2[10];
/* 4.b:  At the end of struct, we realize if there is any duplicate member.
In struct 'x' line 78:
	Duplicate member (a1).*/
/* 4.d:  At the end of struct, we realize if there is incomplete type.
In struct 'x' line 78:
	field (Z) has incomplete type.*/
		
		if (a == 1) 
		{
		write("A is 1");
		}
		else
		{
			if ( a || n >= 0) 
			{
				a3[1][2]=2;
				write("A greater than zero");
/* 4.a:   Structure has no member named (a4) */	
				y1.a4[1][3] = 0;
/* 4.c:   Invalid operands */	
				y1 = y1 + y1;
/* 4.c:   Incompatible type */	
				y2[3].a3[1][2] = 1;
				a = y2[1];
			} 
			else 
			{
				if (a && n == 0) 
				{
					write("Error in decrementing n");
				}
				else 
				{ 
					if (!(a)) 
					{
						a = 1;
					}
				}
			}
		} 
	}

	return 0; 
}
